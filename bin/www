#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
// const WebSocket = require('ws');
const {Server} = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = new Server(server);
var guestList = [];
var userList = [];
var userImgSn = 0;

io.on("connection",(socket)=>{
  socket.onAny((event)=>{
    console.log(event);
  });

  console.log('snrnsrk 커넥션');

  
  socket.on("room", (roomName) =>{
    // close the database connection

    socket.join(roomName);
    guestList.push(socket.id);
    console.log(guestList);
    socket.emit("guestList",guestList,socket.id,userList,userImgSn);
    if(userImgSn < 3){
      userImgSn = userImgSn + 1;
    }else{
      userImgSn = 0;
    }
  });

  socket.on("updateGuestList", (List) =>{
    userList = List;
    console.log(guestList);
    console.log(userList);
    io.to('asd').emit("updateGuestList", userList);
  });

  socket.on("updateGuest", (List) =>{
    userList = List;
    console.log(guestList);
    console.log(userList);
    //io.to('asd').emit("updateGuestList", userList);
  });


  socket.on("disconnecting", () =>{
    if(userList.length == 1){
      guestList.splice(0,1);
      userList.splice(0,1);
      console.log('혼자였는데나감');
    }else{
      socket.rooms.forEach((room)=>socket.to(room).emit("bye",socket.id));
      for (let i = guestList.length - 1; i >= 0; i--){
        if(guestList[i]===socket.id){
          guestList.splice(i,1);
          console.log('나감');
        }
      }
    }
  });
});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
